participant Series-App as sApp
participant Series-Server as sSrv
participant ToPhoto-API as tpApi
participant ToPhoto-Worker as tpWork
participant Processor as tpProc
participant ProducerDelegateFrontend as tpDlgFront
participant ProducerDelegate1 as tpDlg

sApp->+sSrv: add photo series\nto cart (series X)

alt new cart
    sSrv->sSrv: start cart session
else existing cart
    sSrv->sSrv: merge cart positions
end

sSrv->sSrv: build order
sSrv->+tpApi: POST `/v1/orders`
tpApi->tpApi: generate OrderID
tpApi->+tpProc: segment(List<Bunch>, List<Payload>, series X (1))
tpProc->-tpApi: List<SubcartItem>
tpApi->+tpDlgFront: .segment(List<SubcartItem>)
tpDlgFront->tpDlgFront: segment SKUs \nto ProducerDelegates
tpDlgFront->+tpDlg: segment(List<SubcartItem>)
tpDlg->-tpDlgFront: List<Subcart>
tpDlgFront->-tpApi: List<Subcart>
tpApi->-sSrv: Order
sSrv->sSrv: calculate prices\nfor subcarts
sSrv->-sApp: cart

sApp->+sSrv: checkout\n(address, payment)
sSrv->sSrv: enrich order\naddresses etc.
sSrv->+tpApi: POST /v1/orders/:orderid/checkout
tpApi->tpApi: Update Order
tpApi->-sSrv: Order
sSrv->sSrv: payload.zip with\nphotos etc.
sSrv->+tpApi: POST /v1/orders/:orderid/data
tpApi->tpApi: save Order\nto disk

tpApi->+tpDlgFront: .generateOrderId(Subcart, Order)
tpDlgFront->+tpDlg: .generateOrderId(Order)
tpDlg->-tpDlgFront: ProducerOrderID
tpDlgFront->-tpApi: ProducerOrderID

tpApi->tpApi: save Order\nto Mongo-DB
tpApi-->+tpWork:
tpApi->-sSrv: Order
sSrv->sSrv: save Series-Order\n(ToPhoto-OrderID\n+ payment info)
sSrv->-sApp: OrderID

tpWork->+tpProc: process(List<Bunch>, List<Payload>, series X (1))
tpProc->tpProc: layout + render
tpProc->-tpWork: List<Output>
tpWork->+tpDlg: export(Subcart, Order, List<Output>)
tpDlg->tpDlg: save + misc.
tpDlg->-tpWork:
tpWork->tpWork: move order\ndata to archiv
